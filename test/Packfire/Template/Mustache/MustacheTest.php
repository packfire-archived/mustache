<?php
namespace Packfire\Template\Mustache;

/**
 * Test class for Mustache.
 * Generated by PHPUnit on 2012-09-19 at 05:09:54.
 */
class MustacheTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Packfire\Template\Mustache\Mustache
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Mustache('Hello {{name}}{{#intro}}, my name is {{intro}}{{/intro}}!');
        $this->object->parameters(array('name' => 'world'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers \Packfire\Template\Mustache\Mustache::template
     */
    public function testTemplate()
    {
        $this->object->template('Good day {{name}}!');
        $this->assertEquals('Good day world!', $this->object->render());
    }

    /**
     * @covers \Packfire\Template\Mustache\Mustache::parameters
     */
    public function testParameters()
    {
        $this->object->parameters(array('name' => 'Jack', 'intro' => 'Jill'));
        $this->assertEquals('Hello Jack, my name is Jill!', $this->object->render());
    }

    /**
     * @covers \Packfire\Template\Mustache\Mustache::parameters
     */
    public function testEmptyParameters()
    {
        $this->object->parameters(array());
        $this->assertEquals('Hello !', $this->object->render());
    }

    /**
     * @covers \Packfire\Template\Mustache\Mustache::render
     */
    public function testRender()
    {
        $this->assertEquals('Hello world!', $this->object->render());
    }

    public function testObjectRender()
    {
        $obj = new TestObject();
        $obj->template('Hello {{name}}{{#intro}}, my name is {{intro}}{{/intro}}!');
        $this->assertEquals('Hello Regina, my name is James Bond!', $obj->render());
    }

    public function testInverts()
    {
        $mustache = new Mustache();
        $mustache->template('{{^coin}}COIN{{/coin}}!');
        $output = $mustache->parameters(array('coin' => false))->render();
        $this->assertEquals('COIN!', $output);
    }

    public function testArrayList()
    {
        $mustache = new Mustache();
        $mustache->template('{{#list}}|{{name}}{{/list}}!');
        $params = array(
            'list' => array(
                array('name' => 'sam'),
                array('name' => 'john'),
                array('name' => 'henry')
            )
        );
        $output = $mustache->parameters($params)->render();
        $this->assertEquals('|sam|john|henry!', $output);
    }

    public function testDelimiterChange()
    {
        $mustache = new Mustache();
        $mustache->template('{{=<$ $>=}}Hello <$name$>!<$={{ }}=$> My name is {{name}}!');
        $output = $mustache->parameters(array('name' => 'world'))->render();
        $this->assertEquals('Hello world! My name is world!', $output);
    }

    public function testEscapeTest()
    {
        $this->object->template('Good day {{name}}!');
        $this->assertEquals('Good day &lt;b&gt;name&lt;/b&gt;!', $this->object->parameters(array('name' => '<b>name</b>'))->render());
    }

    public function testNoEscapeTest()
    {
        $this->object->template('Good day {{&name}}!');
        $this->assertEquals('Good day <b>name</b>!', $this->object->parameters(array('name' => '<b>name</b>'))->render());
    }

    public function testNoEscapeTest2()
    {
        $this->object->template('Good day {{{name}}}!');
        $this->assertEquals('Good day <b>name</b>!', $this->object->parameters(array('name' => '<b>name</b>'))->render());
    }

    public function testPartial()
    {
        $mustache = new Mustache();
        $mustache->template('There you go! {{>Loader/test}}');
        $loader = new Loader\FileSystemLoader(__DIR__);
        $output = $mustache->loader($loader)->parameters(array('name' => 'world'))->render();
        $this->assertEquals('There you go! My name is world.', $output);
    }
}
